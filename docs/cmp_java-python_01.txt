Here is a list of common concepts between Python and Java:

### Basic Concepts:
1. **Basic Syntax and Structure**
   - Both languages have a defined syntax and structure for writing code, although Python uses indentation while Java uses braces.
   
2. **Data Types**
   - Numbers (int, float, complex in Python; int, float, double in Java)
   - Strings
   - Booleans

3. **Variables and Assignment**
   - Declaration and initialization of variables.
   
4. **Operators**
   - Arithmetic
   - Comparison
   - Logical
   - Bitwise
   - Assignment

5. **Control Flow Statements**
   - if-else
   - switch-case (Java only, but Python has match-case in newer versions)
   - for loop
   - while loop
   - break, continue, and pass (Java does not have pass but has empty statement support)

### Functions and Methods:
1. **Function Definition and Invocation**
   - Defining functions/methods and calling them.
   
2. **Default and Keyword Arguments**
   - Python supports default and keyword arguments. Java supports overloading to achieve similar functionality.

### Object-Oriented Programming:
1. **Classes and Objects**
   - Class definition and creating objects.
   
2. **Instance Methods and Attributes**
   - Defining and using methods and attributes of a class.
   
3. **Class Methods and Static Methods**
   - Defining and using class-level methods and static methods.
   
4. **Inheritance**
   - Extending classes to create a hierarchy.
   
5. **Polymorphism**
   - Method overriding and interface implementation.

6. **Encapsulation**
   - Using access modifiers to protect data.

### Exception Handling:
1. **Try-Except (Python) / Try-Catch (Java)**
   - Handling exceptions using try-except in Python and try-catch in Java.
   
2. **Finally Block**
   - Executing cleanup code regardless of exceptions.
   
3. **Custom Exceptions**
   - Defining custom exception classes.

### Data Structures:
1. **Lists/Arrays**
   - Lists in Python and Arrays in Java.
   
2. **Sets**
   - Sets in both Python and Java.
   
3. **Dictionaries/Maps**
   - Dictionaries in Python and Maps in Java.

4. **Queues**
   - Implemented in collections framework in both languages.

5. **Stacks**
   - Implemented using lists/arrays or collections framework in both languages.

### File Handling:
1. **Reading and Writing Files**
   - Opening, reading, writing, and closing files.
   
2. **Context Managers (Python) / Try-with-Resources (Java)**
   - Ensuring proper resource management.

### Iterators and Generators:
1. **Iterators**
   - Defining and using iterators.
   
2. **Generators (Python) / Iterators with custom behavior (Java)**
   - Generators in Python and custom iterators in Java.

### Concurrency:
1. **Multithreading**
   - Thread class and Runnable interface in Java; threading module in Python.
   
2. **Synchronization**
   - Synchronization mechanisms in both languages.

3. **Concurrent Collections**
   - Concurrent collections available in both languages.

### Functional Programming:
1. **Lambda Expressions**
   - Lambda expressions in both Python and Java.
   
2. **Functional Interfaces (Java) / Callable Objects (Python)**
   - Functional interfaces in Java and callable objects in Python.
   
3. **Streams API (Java) / itertools (Python)**
   - Stream processing in Java and itertools module in Python.

### Modules and Packages:
1. **Importing Modules**
   - Importing and using modules/packages.
   
2. **Creating and Using Packages**
   - Defining packages and organizing code.

### Documentation and Annotations:
1. **Docstrings (Python) / Javadoc (Java)**
   - Documenting code using docstrings in Python and Javadoc in Java.
   
2. **Annotations**
   - Using annotations for metadata in Java and Python's similar concepts like decorators for functions.

### Typing:
1. **Type Hints (Python) / Type Annotations (Java)**
   - Optional type hints in Python and mandatory type declarations in Java.

### Standard Libraries:
1. **Extensive Standard Libraries**
   - Both languages come with extensive standard libraries for various tasks.

### Garbage Collection:
1. **Automatic Memory Management**
   - Both languages have garbage collectors for automatic memory management.

### IDE and Tools:
1. **IDEs and Development Tools**
   - Popular IDEs like IntelliJ, Eclipse (Java), and PyCharm, VSCode (Python).

### Testing:
1. **Testing Frameworks**
   - JUnit for Java, unittest and pytest for Python.

These common concepts demonstrate the similarities in core programming paradigms, despite the syntactical and language-specific differences between Python and Java.